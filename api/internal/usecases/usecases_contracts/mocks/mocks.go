// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mock_usecases_contracts is a generated GoMock package.
package mock_usecases_contracts

import (
	entities "api/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetRateUseCase is a mock of GetRateUseCase interface.
type MockGetRateUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetRateUseCaseMockRecorder
}

// MockGetRateUseCaseMockRecorder is the mock recorder for MockGetRateUseCase.
type MockGetRateUseCaseMockRecorder struct {
	mock *MockGetRateUseCase
}

// NewMockGetRateUseCase creates a new mock instance.
func NewMockGetRateUseCase(ctrl *gomock.Controller) *MockGetRateUseCase {
	mock := &MockGetRateUseCase{ctrl: ctrl}
	mock.recorder = &MockGetRateUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRateUseCase) EXPECT() *MockGetRateUseCaseMockRecorder {
	return m.recorder
}

// GetBtcUahRate mocks base method.
func (m *MockGetRateUseCase) GetBtcUahRate() (*entities.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcUahRate")
	ret0, _ := ret[0].(*entities.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcUahRate indicates an expected call of GetBtcUahRate.
func (mr *MockGetRateUseCaseMockRecorder) GetBtcUahRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcUahRate", reflect.TypeOf((*MockGetRateUseCase)(nil).GetBtcUahRate))
}

// MockSendEmailsUseCase is a mock of SendEmailsUseCase interface.
type MockSendEmailsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendEmailsUseCaseMockRecorder
}

// MockSendEmailsUseCaseMockRecorder is the mock recorder for MockSendEmailsUseCase.
type MockSendEmailsUseCaseMockRecorder struct {
	mock *MockSendEmailsUseCase
}

// NewMockSendEmailsUseCase creates a new mock instance.
func NewMockSendEmailsUseCase(ctrl *gomock.Controller) *MockSendEmailsUseCase {
	mock := &MockSendEmailsUseCase{ctrl: ctrl}
	mock.recorder = &MockSendEmailsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendEmailsUseCase) EXPECT() *MockSendEmailsUseCaseMockRecorder {
	return m.recorder
}

// SendToAll mocks base method.
func (m *MockSendEmailsUseCase) SendToAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToAll indicates an expected call of SendToAll.
func (mr *MockSendEmailsUseCaseMockRecorder) SendToAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAll", reflect.TypeOf((*MockSendEmailsUseCase)(nil).SendToAll))
}

// MockSubscribeEmailUseCase is a mock of SubscribeEmailUseCase interface.
type MockSubscribeEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribeEmailUseCaseMockRecorder
}

// MockSubscribeEmailUseCaseMockRecorder is the mock recorder for MockSubscribeEmailUseCase.
type MockSubscribeEmailUseCaseMockRecorder struct {
	mock *MockSubscribeEmailUseCase
}

// NewMockSubscribeEmailUseCase creates a new mock instance.
func NewMockSubscribeEmailUseCase(ctrl *gomock.Controller) *MockSubscribeEmailUseCase {
	mock := &MockSubscribeEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscribeEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribeEmailUseCase) EXPECT() *MockSubscribeEmailUseCaseMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscribeEmailUseCase) Subscribe(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribeEmailUseCaseMockRecorder) Subscribe(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribeEmailUseCase)(nil).Subscribe), email)
}

// MockEmailSubscriptionRepo is a mock of EmailSubscriptionRepo interface.
type MockEmailSubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSubscriptionRepoMockRecorder
}

// MockEmailSubscriptionRepoMockRecorder is the mock recorder for MockEmailSubscriptionRepo.
type MockEmailSubscriptionRepoMockRecorder struct {
	mock *MockEmailSubscriptionRepo
}

// NewMockEmailSubscriptionRepo creates a new mock instance.
func NewMockEmailSubscriptionRepo(ctrl *gomock.Controller) *MockEmailSubscriptionRepo {
	mock := &MockEmailSubscriptionRepo{ctrl: ctrl}
	mock.recorder = &MockEmailSubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSubscriptionRepo) EXPECT() *MockEmailSubscriptionRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEmailSubscriptionRepo) Add(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEmailSubscriptionRepoMockRecorder) Add(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmailSubscriptionRepo)(nil).Add), email)
}

// GetAll mocks base method.
func (m *MockEmailSubscriptionRepo) GetAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEmailSubscriptionRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmailSubscriptionRepo)(nil).GetAll))
}

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendToList mocks base method.
func (m *MockMailer) SendToList(emails []string, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToList", emails, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToList indicates an expected call of SendToList.
func (mr *MockMailerMockRecorder) SendToList(emails, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToList", reflect.TypeOf((*MockMailer)(nil).SendToList), emails, message)
}

// MockCryptoProvider is a mock of CryptoProvider interface.
type MockCryptoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoProviderMockRecorder
}

// MockCryptoProviderMockRecorder is the mock recorder for MockCryptoProvider.
type MockCryptoProviderMockRecorder struct {
	mock *MockCryptoProvider
}

// NewMockCryptoProvider creates a new mock instance.
func NewMockCryptoProvider(ctrl *gomock.Controller) *MockCryptoProvider {
	mock := &MockCryptoProvider{ctrl: ctrl}
	mock.recorder = &MockCryptoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoProvider) EXPECT() *MockCryptoProviderMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method.
func (m *MockCryptoProvider) GetExchangeRate(currencyPair entities.CurrencyPair) (*entities.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", currencyPair)
	ret0, _ := ret[0].(*entities.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockCryptoProviderMockRecorder) GetExchangeRate(currencyPair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockCryptoProvider)(nil).GetExchangeRate), currencyPair)
}
